#!/bin/bash
# License: Unspecified

m4_include(lib/common.sh)

# Source makepkg.conf; fail if it is not found
if [[ -r '/etc/makepkg.conf' ]]; then
	# shellcheck source=makepkg-x86_64.conf
	source '/etc/makepkg.conf'
else
	die '/etc/makepkg.conf not found!'
fi

# Source user-specific makepkg.conf overrides
if [[ -r "${XDG_CONFIG_HOME:-$HOME/.config}/pacman/makepkg.conf" ]]; then
	# shellcheck source=/dev/null
	source "${XDG_CONFIG_HOME:-$HOME/.config}/pacman/makepkg.conf"
elif [[ -r "$HOME/.makepkg.conf" ]]; then
	# shellcheck source=/dev/null
	source "$HOME/.makepkg.conf"
fi

cmd=${0##*/}
cmd=${cmd#git-}

if [[ ! -f PKGBUILD ]]; then
	die 'No PKGBUILD file'
fi

source=()
# shellcheck source=PKGBUILD.proto
. ./PKGBUILD
pkgbase=${pkgbase:-$pkgname}

if is_debug_pkg; then
	for pkg in "${pkgname[@]}"; do
		pkgname+=("${pkg}-debug")
	done
fi

case "$cmd" in
	git-commitpkg)
		if (( $# == 0 )); then
			die 'Usage: git-commitpkg <reponame> [-f] [-s server] [-l limit] [-a arch] [commit message]'
		fi
		repo="$1"
		shift
		;;
	*pkg)
		repo="${cmd%pkg}"
		;;
	*)
		die 'Usage: git-commitpkg <reponame> [-f] [-s server] [-l limit] [-a arch] [commit message]'
		;;
esac

# find files which should be under source control
needsversioning=()
for s in "${source[@]}"; do
	[[ $s != *://* ]] && needsversioning+=("$s")
done
for i in 'changelog' 'install'; do
	while read -r file; do
		# evaluate any bash variables used
		eval "file=\"$(sed "s/^\(['\"]\)\(.*\)\1\$/\2/" <<< "$file")\""
		needsversioning+=("$file")
	done < <(sed -n "s/^[[:space:]]*$i=//p" PKGBUILD)
done

# assert that they really are controlled by git
if (( ${#needsversioning[*]} )); then
	for file in "${needsversioning[@]}"; do
		if ! git ls-files --error-unmatch "$file"; then
			die "%s is not under version control" "$file"
		fi
	done
fi

rsyncopts=(-e ssh -p '--chmod=ug=rw,o=r' -c -h -L --progress --partial -y)
archreleaseopts=()
while getopts ':l:a:s:f' flag; do
	case $flag in
		f) archreleaseopts+=('-f') ;;
		s) server=$OPTARG ;;
		l) rsyncopts+=("--bwlimit=$OPTARG") ;;
		a) commit_arch=$OPTARG ;;
		:) die "Option requires an argument -- '%s'" "$OPTARG" ;;
		\?) die "Invalid option -- '%s'" "$OPTARG" ;;
	esac
done
shift $(( OPTIND - 1 ))

# check packages for validity
for _arch in "${arch[@]}"; do
	if [[ -n $commit_arch && ${_arch} != "$commit_arch" ]]; then
		continue
	fi
	for _pkgname in "${pkgname[@]}"; do
		fullver=$(get_full_version "$_pkgname")

		if pkgfile=$(find_cached_package "$_pkgname" "$fullver" "$_arch"); then
			if grep -q "packager = Unknown Packager" <(bsdtar -xOqf "$pkgfile" .PKGINFO); then
				die "PACKAGER was not set when building package"
			fi
			hashsum=sha256sum
			pkgbuild_hash=$(awk -v"hashsum=$hashsum" -F' = ' '$1 == "pkgbuild_"hashsum {print $2}' <(bsdtar -xOqf "$pkgfile" .BUILDINFO))
			if [[ "$pkgbuild_hash" != "$($hashsum PKGBUILD|cut -d' ' -f1)" ]]; then
				die "PKGBUILD $hashsum mismatch: expected $pkgbuild_hash"
			fi
		fi
	done
done


if [[ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]]; then
	die "Needs to be on master branch"
fi

if [[ -z $server ]]; then
	server='repos.linderud.dev'
fi

if [[ ! -f .SRCINFO ]]; then
	stat_busy 'Creating .SRCINFO'
	makepkg --printsrcinfo > .SRCINFO
	git add .SRCINFO
	stat_done
fi

if [[ -n $(git status -s) ]]; then

	stat_busy 'Staging files'
	for f in $(git ls-files -m); do
		git add "$f"
	done
	for f in $(git ls-files -d); do
		git rm "$f"
	done
	stat_done

	full_version="$(get_full_version)"
	tag_pkgver=release-${full_version/:/-}
	msgtemplate="upgpkg: $pkgbase ${tag_pkgver}"
	if [[ -n $1 ]]; then
		stat_busy 'Committing changes'
		git commit -v -q -m "${msgtemplate}: ${1}" || die
		stat_done
	else
		msgfile="$(mktemp)"
		echo "$msgtemplate" > "$msgfile"
		if [[ -n $GIT_EDITOR ]]; then
			$GIT_EDITOR "$msgfile"
		elif [[ -n $VISUAL ]]; then
			$VISUAL "$msgfile"
		elif [[ -n $EDITOR ]]; then
			$EDITOR "$msgfile"
		else
			vi "$msgfile"
		fi
		[[ -s $msgfile ]] || die
		stat_busy 'Committing changes'
		git commit -q -F "$msgfile" || die
		unlink "$msgfile"
		stat_done
	fi
fi

declare -a uploads
declare -a commit_arches
declare -a skip_arches

for _arch in "${arch[@]}"; do
	if [[ -n $commit_arch && ${_arch} != "$commit_arch" ]]; then
		skip_arches+=("$_arch")
		continue
	fi

	for _pkgname in "${pkgname[@]}"; do
		fullver=$(get_full_version "$_pkgname")

		if ! pkgfile=$(find_cached_package "$_pkgname" "$fullver" "${_arch}"); then
			warning "Skipping %s: failed to locate package file" "$_pkgname-$fullver-$_arch"
			skip_arches+=("$_arch")
			continue 2
		fi
		uploads+=("$pkgfile")
		# This only selects the uploads which intended for this commit
	#	if [[ -f .REPOINFO ]]; then
	#		while read -r pkgname designatedRepo; do
	#			[[ "$_pkgname" == "$pkgname" ]] || continue
	#			[[ "$repo" == "$designatedRepo" ]] && uploads+=("$pkgfile")
	#		done < .REPOINFO
	#	else
	#		uploads+=("$pkgfile")
	#	fi

		sigfile="${pkgfile}.sig"
		if [[ ! -f $sigfile ]]; then
			msg "Signing package %s..." "${pkgfile}"
			if [[ -n $GPGKEY ]]; then
				SIGNWITHKEY=(-u "${GPGKEY}")
			fi
			gpg --detach-sign --use-agent --no-armor "${SIGNWITHKEY[@]}" "${pkgfile}" || die
		fi
		if ! gpg --verify "$sigfile" "$pkgfile" >/dev/null 2>&1; then
			die "Signature %s is incorrect!" "$sigfile"
		fi
		uploads+=("$sigfile")
	done
done

for _arch in "${arch[@]}"; do
	if ! in_array "$_arch" "${skip_arches[@]}"; then
		commit_arches+=("$_arch")
	fi
done

if [[ ${#commit_arches[*]} -gt 0 ]]; then
	git-archrelease "${archreleaseopts[@]}" "${commit_arches[@]/#/$repo-}" || die
fi

if [[ ${#uploads[*]} -gt 0 ]]; then
	new_uploads=()

	# convert to absolute paths so rsync can work with colons (epoch)
	while read -r -d '' upload; do
		new_uploads+=("$upload")
	done < <(realpath -z "${uploads[@]}")

	uploads=("${new_uploads[@]}")
	unset new_uploads
	msg 'Uploading all package and signature files'
	rsync "${rsyncopts[@]}" "${uploads[@]}" "$server:staging/$repo/" || die
fi
